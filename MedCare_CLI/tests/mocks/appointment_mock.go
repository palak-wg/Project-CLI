// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/appointment_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "doctor-patient-cli/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAppointmentRepository is a mock of AppointmentRepository interface.
type MockAppointmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentRepositoryMockRecorder
}

// MockAppointmentRepositoryMockRecorder is the mock recorder for MockAppointmentRepository.
type MockAppointmentRepositoryMockRecorder struct {
	mock *MockAppointmentRepository
}

// NewMockAppointmentRepository creates a new mock instance.
func NewMockAppointmentRepository(ctrl *gomock.Controller) *MockAppointmentRepository {
	mock := &MockAppointmentRepository{ctrl: ctrl}
	mock.recorder = &MockAppointmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentRepository) EXPECT() *MockAppointmentRepositoryMockRecorder {
	return m.recorder
}

// ApproveAppointment mocks base method.
func (m *MockAppointmentRepository) ApproveAppointment(appointmentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveAppointment", appointmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveAppointment indicates an expected call of ApproveAppointment.
func (mr *MockAppointmentRepositoryMockRecorder) ApproveAppointment(appointmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveAppointment", reflect.TypeOf((*MockAppointmentRepository)(nil).ApproveAppointment), appointmentID)
}

// GetAppointmentsByDoctorID mocks base method.
func (m *MockAppointmentRepository) GetAppointmentsByDoctorID(doctorID string) ([]models.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentsByDoctorID", doctorID)
	ret0, _ := ret[0].([]models.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentsByDoctorID indicates an expected call of GetAppointmentsByDoctorID.
func (mr *MockAppointmentRepositoryMockRecorder) GetAppointmentsByDoctorID(doctorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentsByDoctorID", reflect.TypeOf((*MockAppointmentRepository)(nil).GetAppointmentsByDoctorID), doctorID)
}

// GetPendingAppointmentsByDoctorID mocks base method.
func (m *MockAppointmentRepository) GetPendingAppointmentsByDoctorID(doctorID string) ([]models.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingAppointmentsByDoctorID", doctorID)
	ret0, _ := ret[0].([]models.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingAppointmentsByDoctorID indicates an expected call of GetPendingAppointmentsByDoctorID.
func (mr *MockAppointmentRepositoryMockRecorder) GetPendingAppointmentsByDoctorID(doctorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingAppointmentsByDoctorID", reflect.TypeOf((*MockAppointmentRepository)(nil).GetPendingAppointmentsByDoctorID), doctorID)
}

// SendAppointmentRequest mocks base method.
func (m *MockAppointmentRepository) SendAppointmentRequest(patientID, doctorID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppointmentRequest", patientID, doctorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppointmentRequest indicates an expected call of SendAppointmentRequest.
func (mr *MockAppointmentRepositoryMockRecorder) SendAppointmentRequest(patientID, doctorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppointmentRequest", reflect.TypeOf((*MockAppointmentRepository)(nil).SendAppointmentRequest), patientID, doctorID)
}

// MockAppointmentService is a mock of AppointmentService interface.
type MockAppointmentService struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentServiceMockRecorder
}

// MockAppointmentServiceMockRecorder is the mock recorder for MockAppointmentService.
type MockAppointmentServiceMockRecorder struct {
	mock *MockAppointmentService
}

//// NewMockAppointmentService creates a new mock instance.
//func NewMockAppointmentService(ctrl *gomock.Controller) *MockAppointmentService {
//	mock := &MockAppointmentService{ctrl: ctrl}
//	mock.recorder = &MockAppointmentServiceMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use.
//func (m *MockAppointmentService) EXPECT() *MockAppointmentServiceMockRecorder {
//	return m.recorder
//}
//
//// ApproveAppointment mocks base method.
//func (m *MockAppointmentService) ApproveAppointment(appointmentID int) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ApproveAppointment", appointmentID)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// ApproveAppointment indicates an expected call of ApproveAppointment.
//func (mr *MockAppointmentServiceMockRecorder) ApproveAppointment(appointmentID interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveAppointment", reflect.TypeOf((*MockAppointmentService)(nil).ApproveAppointment), appointmentID)
//}
//
//// GetAppointmentsByDoctorID mocks base method.
//func (m *MockAppointmentService) GetAppointmentsByDoctorID(doctorID string) ([]models.Appointment, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "GetAppointmentsByDoctorID", doctorID)
//	ret0, _ := ret[0].([]models.Appointment)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// GetAppointmentsByDoctorID indicates an expected call of GetAppointmentsByDoctorID.
//func (mr *MockAppointmentServiceMockRecorder) GetAppointmentsByDoctorID(doctorID interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentsByDoctorID", reflect.TypeOf((*MockAppointmentService)(nil).GetAppointmentsByDoctorID), doctorID)
//}
//
//// GetPendingAppointmentsByDoctorID mocks base method.
//func (m *MockAppointmentService) GetPendingAppointmentsByDoctorID(doctorID string) ([]models.Appointment, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "GetPendingAppointmentsByDoctorID", doctorID)
//	ret0, _ := ret[0].([]models.Appointment)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// GetPendingAppointmentsByDoctorID indicates an expected call of GetPendingAppointmentsByDoctorID.
//func (mr *MockAppointmentServiceMockRecorder) GetPendingAppointmentsByDoctorID(doctorID interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingAppointmentsByDoctorID", reflect.TypeOf((*MockAppointmentService)(nil).GetPendingAppointmentsByDoctorID), doctorID)
//}
//
//// SendAppointmentRequest mocks base method.
//func (m *MockAppointmentService) SendAppointmentRequest(patientID, doctorID string) error {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "SendAppointmentRequest", patientID, doctorID)
//	ret0, _ := ret[0].(error)
//	return ret0
//}
//
//// SendAppointmentRequest indicates an expected call of SendAppointmentRequest.
//func (mr *MockAppointmentServiceMockRecorder) SendAppointmentRequest(patientID, doctorID interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppointmentRequest", reflect.TypeOf((*MockAppointmentService)(nil).SendAppointmentRequest), patientID, doctorID)
//}
