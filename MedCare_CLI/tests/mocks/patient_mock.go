// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/patient_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "doctor-patient-cli/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPatientRepository is a mock of PatientRepository interface.
type MockPatientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPatientRepositoryMockRecorder
}

// MockPatientRepositoryMockRecorder is the mock recorder for MockPatientRepository.
type MockPatientRepositoryMockRecorder struct {
	mock *MockPatientRepository
}

// NewMockPatientRepository creates a new mock instance.
func NewMockPatientRepository(ctrl *gomock.Controller) *MockPatientRepository {
	mock := &MockPatientRepository{ctrl: ctrl}
	mock.recorder = &MockPatientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientRepository) EXPECT() *MockPatientRepositoryMockRecorder {
	return m.recorder
}

// GetPatientByID mocks base method.
func (m *MockPatientRepository) GetPatientByID(patientID string) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientByID", patientID)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientByID indicates an expected call of GetPatientByID.
func (mr *MockPatientRepositoryMockRecorder) GetPatientByID(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientByID", reflect.TypeOf((*MockPatientRepository)(nil).GetPatientByID), patientID)
}

// UpdatePatientDetails mocks base method.
func (m *MockPatientRepository) UpdatePatientDetails(patient *models.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientDetails", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatientDetails indicates an expected call of UpdatePatientDetails.
func (mr *MockPatientRepositoryMockRecorder) UpdatePatientDetails(patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDetails", reflect.TypeOf((*MockPatientRepository)(nil).UpdatePatientDetails), patient)
}

// MockPatientService is a mock of PatientService interface.
type MockPatientService struct {
	ctrl     *gomock.Controller
	recorder *MockPatientServiceMockRecorder
}

// MockPatientServiceMockRecorder is the mock recorder for MockPatientService.
type MockPatientServiceMockRecorder struct {
	mock *MockPatientService
}

// NewMockPatientService creates a new mock instance.
func NewMockPatientService(ctrl *gomock.Controller) *MockPatientService {
	mock := &MockPatientService{ctrl: ctrl}
	mock.recorder = &MockPatientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientService) EXPECT() *MockPatientServiceMockRecorder {
	return m.recorder
}

// GetPatientByID mocks base method.
func (m *MockPatientService) GetPatientByID(patientID string) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientByID", patientID)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientByID indicates an expected call of GetPatientByID.
func (mr *MockPatientServiceMockRecorder) GetPatientByID(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientByID", reflect.TypeOf((*MockPatientService)(nil).GetPatientByID), patientID)
}

// UpdatePatientDetails mocks base method.
func (m *MockPatientService) UpdatePatientDetails(patient *models.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientDetails", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatientDetails indicates an expected call of UpdatePatientDetails.
func (mr *MockPatientServiceMockRecorder) UpdatePatientDetails(patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDetails", reflect.TypeOf((*MockPatientService)(nil).UpdatePatientDetails), patient)
}
