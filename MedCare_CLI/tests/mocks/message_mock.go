// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/message_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "doctor-patient-cli/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// GetUnreadMessages mocks base method.
func (m *MockMessageRepository) GetUnreadMessages(userID string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessages", userID)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessages indicates an expected call of GetUnreadMessages.
func (mr *MockMessageRepositoryMockRecorder) GetUnreadMessages(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessages", reflect.TypeOf((*MockMessageRepository)(nil).GetUnreadMessages), userID)
}

// GetUnreadMessagesById mocks base method.
func (m *MockMessageRepository) GetUnreadMessagesById(patientID, doctorID string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessagesById", patientID, doctorID)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessagesById indicates an expected call of GetUnreadMessagesById.
func (mr *MockMessageRepositoryMockRecorder) GetUnreadMessagesById(patientID, doctorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessagesById", reflect.TypeOf((*MockMessageRepository)(nil).GetUnreadMessagesById), patientID, doctorID)
}

// RespondToPatient mocks base method.
func (m *MockMessageRepository) RespondToPatient(doctorID, patientID, response string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToPatient", doctorID, patientID, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToPatient indicates an expected call of RespondToPatient.
func (mr *MockMessageRepositoryMockRecorder) RespondToPatient(doctorID, patientID, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToPatient", reflect.TypeOf((*MockMessageRepository)(nil).RespondToPatient), doctorID, patientID, response)
}

// SendMessage mocks base method.
func (m *MockMessageRepository) SendMessage(fromID, toID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", fromID, toID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageRepositoryMockRecorder) SendMessage(fromID, toID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageRepository)(nil).SendMessage), fromID, toID, message)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// GetUnreadMessages mocks base method.
func (m *MockMessageService) GetUnreadMessages(userID string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessages", userID)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessages indicates an expected call of GetUnreadMessages.
func (mr *MockMessageServiceMockRecorder) GetUnreadMessages(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessages", reflect.TypeOf((*MockMessageService)(nil).GetUnreadMessages), userID)
}

// GetUnreadMessagesById mocks base method.
func (m *MockMessageService) GetUnreadMessagesById(patientID, doctorID string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessagesById", patientID, doctorID)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessagesById indicates an expected call of GetUnreadMessagesById.
func (mr *MockMessageServiceMockRecorder) GetUnreadMessagesById(patientID, doctorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessagesById", reflect.TypeOf((*MockMessageService)(nil).GetUnreadMessagesById), patientID, doctorID)
}

// RespondToPatient mocks base method.
func (m *MockMessageService) RespondToPatient(doctorID, patientID, response string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToPatient", doctorID, patientID, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToPatient indicates an expected call of RespondToPatient.
func (mr *MockMessageServiceMockRecorder) RespondToPatient(doctorID, patientID, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToPatient", reflect.TypeOf((*MockMessageService)(nil).RespondToPatient), doctorID, patientID, response)
}

// SendMessage mocks base method.
func (m *MockMessageService) SendMessage(fromID, toID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", fromID, toID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageServiceMockRecorder) SendMessage(fromID, toID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageService)(nil).SendMessage), fromID, toID, message)
}
